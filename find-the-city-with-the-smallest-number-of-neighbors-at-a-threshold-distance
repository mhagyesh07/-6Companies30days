class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<pair<int,int>>adj[n];
        for (auto it : edges) 
        {
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }

        int minReachable=INT_MAX;
        int city=-1;

        for(int i=0;i<n;i++) 
        {
            vector<int> dist(n,1e9);
            dist[i]=0;
            priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
            q.push({0,i});

            while (!q.empty()) 
            {
                int node=q.top().second;
                int d=q.top().first;
                q.pop();

                if(d>dist[node]) continue;

                for(auto &neighbor : adj[node]) 
                {
                    int nextNode=neighbor.first;
                    int weight=neighbor.second;
                    if (dist[node]+weight<dist[nextNode]) 
                    {
                        dist[nextNode]=dist[node]+weight;
                        q.push({dist[nextNode],nextNode});
                    }
                }
            }
            int reachable=0;
            for(int j=0;j<n;j++) 
            {
                if(dist[j]<=distanceThreshold) 
                {
                    reachable++;
                }
            }

            if(reachable<=minReachable) 
            {
                minReachable=reachable;
                city=i;
            }
        }
        return city;
    }
};
